name: 🚀 CI/CD Pipeline - Grok-Beast Trading Bot

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'grok-beast-trading-bot'

jobs:
  # ===========================================
  # LINTING & CODE QUALITY
  # ===========================================
  lint-and-quality:
    name: 🔍 Linting & Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 isort mypy bandit safety
    
    - name: 🎨 Code formatting (Black)
      run: |
        black --check --diff gbsb/ scripts/ tests/
    
    - name: 📏 Import sorting (isort)
      run: |
        isort --check-only --diff gbsb/ scripts/ tests/
    
    - name: 🔍 Linting (flake8)
      run: |
        flake8 gbsb/ scripts/ tests/ --max-line-length=100 --extend-ignore=E203,W503
    
    - name: 🔒 Security check (bandit)
      run: |
        bandit -r gbsb/ scripts/ -f json -o bandit-report.json || true
        bandit -r gbsb/ scripts/ -ll
    
    - name: 🛡️ Security vulnerabilities (safety)
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # ===========================================
  # TYPE CHECKING
  # ===========================================
  type-check:
    name: 🔍 Type Checking
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mypy types-requests
    
    - name: 🔍 Type checking (mypy)
      run: |
        mypy gbsb/ scripts/ --ignore-missing-imports --no-strict-optional

  # ===========================================
  # BACKEND TESTING
  # ===========================================
  backend-tests:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
    
    - name: 🧪 Run unit tests
      run: |
        pytest tests/unit/ -v --cov=gbsb --cov-report=xml --cov-report=term-missing --junitxml=unit-test-results.xml
    
    - name: 🔗 Run integration tests
      run: |
        pytest tests/integration/ -v --cov=gbsb --cov-report=xml --cov-report=term-missing --junitxml=integration-test-results.xml
    
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage-${{ matrix.python-version }}
    
    - name: 📋 Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          unit-test-results.xml
          integration-test-results.xml
          coverage.xml

  # ===========================================
  # FRONTEND TESTING
  # ===========================================
  frontend-tests:
    name: ⚛️ Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📦 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: 📦 Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: 🔍 Lint frontend code
      working-directory: ./frontend
      run: |
        npm run lint
    
    - name: 🔍 Type check frontend
      working-directory: ./frontend
      run: |
        npm run type-check
    
    - name: 🧪 Run frontend tests
      working-directory: ./frontend
      run: |
        npm test -- --coverage --watchAll=false
    
    - name: 🏗️ Build frontend
      working-directory: ./frontend
      run: |
        npm run build
    
    - name: 📊 Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage

  # ===========================================
  # END-TO-END TESTING
  # ===========================================
  e2e-tests:
    name: 🎯 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [backend-tests, frontend-tests]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
    
    - name: 🏗️ Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
        cd ..
    
    - name: 🧪 Run E2E tests
      run: |
        pytest tests/e2e/ -v --timeout=300 --junitxml=e2e-test-results.xml
    
    - name: 📋 Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: e2e-test-results.xml

  # ===========================================
  # PERFORMANCE TESTING
  # ===========================================
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [backend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark locust
    
    - name: 🏃 Run performance benchmarks
      run: |
        pytest tests/ --benchmark-only --benchmark-sort=mean --benchmark-save=benchmark-results
    
    - name: 📊 Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: .benchmarks/

  # ===========================================
  # SECURITY SCANNING
  # ===========================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit semgrep
    
    - name: 🔒 Run security scans
      run: |
        # Dependency vulnerability scan
        safety check --json --output safety-report.json || true
        
        # Code security analysis
        bandit -r gbsb/ scripts/ -f json -o bandit-report.json || true
        
        # SAST with Semgrep
        semgrep --config=auto gbsb/ scripts/ --json --output=semgrep-report.json || true
    
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  # ===========================================
  # DOCKER BUILD & TEST
  # ===========================================
  docker-build:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏗️ Build and test Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: test
    
    - name: 🧪 Test Docker image
      run: |
        docker run --rm -d --name grok-beast-test -p 8000:8000 \
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
        
        # Wait for service to start
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test API endpoints
        curl -f http://localhost:8000/api/bot/status || exit 1
        
        docker stop grok-beast-test

  # ===========================================
  # DEPLOYMENT (Staging)
  # ===========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [docker-build, security-scan, e2e-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Aquí irían los comandos de deployment a staging
        # Por ejemplo: kubectl, docker-compose, etc.

  # ===========================================
  # DEPLOYMENT (Production)
  # ===========================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [docker-build, security-scan, e2e-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Push to production registry
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:v${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 🌟 Deploy to production
      run: |
        echo "🌟 Deploying to production environment..."
        # Aquí irían los comandos de deployment a producción
        # Por ejemplo: kubectl apply, helm upgrade, etc.

  # ===========================================
  # NOTIFICATIONS
  # ===========================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 📢 Notify success
      if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Aquí irían notificaciones a Slack, Discord, etc.
    
    - name: 📢 Notify failure
      if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Aquí irían notificaciones de error



